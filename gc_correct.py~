#Main python script to gc-correct sequence counts aligned to one #chromosome.
#
import sys

#Input arguments
#B = binsize
#W = windowsize
#sequence = fasta file (genome sequence for this chromosome)
args = sys.argv
args = args[1:]
seqfile = args[0]
countsfile = args[1]
gcfuncfile = args[2]
binsize = int(args[3])
winsize = int(args[4])
print seqfile + countsfile + gcfuncfile
print binsize + winsize


#Start initalize reading
reader = open('pg76.txt','r')
outfile = 

# initiate bin_position counter (i.e. where we are in a bin)
# initiate chr_postion in chromosome 

reader = open(seqfile,'r')
#line = reader.readline()

ix_bin = 0 #Index of positions within bins
ix_seq = 0
print 'Start reading fasta file'
while line != '':  #line has to exist before this call.
    length=length + len(line)
    lines += 1
    line = reader.readline()


while 
# read lines till end of window for current position xi (readLines(), get enough lines from chr1.fa to get GC for the current position)

# get GC for that position (get_GC())
# then get predicted count for that position 
# store prediction in temporary vector 
# if bin_position==b (yes, bin_position=0 and output bin statistics, no increment bin_position)
# increment to chr_position


#3.  Create the function describing GC bias (GC increments from 0:1 in steps of 0.01) This will be a tab delimited file with header "GC" and "PredictedCount"  [IL]
#4.   Makefile  [NT]
#5.   Readlines()
#6.   get_position_GC()
#7.   get_predicted_position_count()
#8.   correct_bin_count()  # including summarising predicted_bin_count
#9.   write_bin_statistics()


